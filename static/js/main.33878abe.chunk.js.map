{"version":3,"sources":["components/Header/index.js","components/Square/index.js","components/Board/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","game","Square","type","src","process","image","key","id","team","onClick","click","Board","renderSquare","i","components_Square","_this","teams","name","handleClick","this","React","Component","Footer","score","App","state","clicked","includes","alert","concat","setState","console","log","push","length","j","Math","floor","random","_ref","components_Header","components_Board","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33878abe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div>\r\n            <div className=\"header\">Andrew's {props.game} Clicky Game</div>\r\n            <div className=\"instruction-header\">Click on a team logo to score points. Don't choose the same logo twice!</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <input\r\n        type=\"image\"\r\n        className=\"game-square\"\r\n        src={process.env.PUBLIC_URL + props.image}\r\n        key={props.id}\r\n        team={props.team}\r\n        onClick={() => props.click(props.id)} />\r\n    )\r\n}\r\n\r\nexport default Square;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Square from \"./../Square\";\r\n\r\nclass Board extends React.Component {\r\n\r\nrenderSquare = i => {\r\n    return <Square\r\n    image={this.props.teams[i].image}\r\n    id={this.props.teams[i].id}\r\n    team={this.props.teams[i].name}\r\n    click={this.props.handleClick}\r\n        />\r\n}\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"game-container\">\r\n        <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n            {this.renderSquare(8)}\r\n            {this.renderSquare(9)}\r\n            {this.renderSquare(10)}\r\n            {this.renderSquare(11)}\r\n            {this.renderSquare(12)}\r\n            {this.renderSquare(13)}\r\n            {this.renderSquare(14)}\r\n            {this.renderSquare(15)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n            {this.renderSquare(16)}\r\n            {this.renderSquare(17)}\r\n            {this.renderSquare(18)}\r\n            {this.renderSquare(19)}\r\n            {this.renderSquare(20)}\r\n            {this.renderSquare(21)}\r\n            {this.renderSquare(22)}\r\n            {this.renderSquare(23)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n            {this.renderSquare(24)}\r\n            {this.renderSquare(25)}\r\n            {this.renderSquare(26)}\r\n            {this.renderSquare(27)}\r\n            {this.renderSquare(28)}\r\n            {this.renderSquare(29)}\r\n            {this.renderSquare(30)}\r\n            {this.renderSquare(31)}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default Board;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <div className=\"footer\">\r\n        Score: {props.score}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport Board from \"./components/Board\";\nimport Footer from \"./components/Footer\";\nimport teams from \"./teams.json\";\n\nclass App extends Component {\n  state = {\n    teams: teams,\n    clicked: [],\n    score: 0\n};\n\n  handleClick = key => {\n      if (this.state.clicked.includes(key)){\n          alert(`GAME OVER. You scored ${this.state.score}`);\n          this.setState({\n            clicked: [],\n            score: 0\n          })\n          console.log(this.state)\n      }\n      else {\n        if (this.state.score == 31) {\n          alert(\"Perfect Score! You win!\")\n          this.setState({\n            clicked: [],\n            score: 0\n          })\n        }\n        else {\n        this.state.clicked.push(key)\n        // Shuffle array of logos. Algorithm found on StackOverflow\n        for (let i = this.state.teams.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n            [this.state.teams[i], this.state.teams[j]] = [this.state.teams[j], this.state.teams[i]]; // swap elements\n          }\n        this.setState({ score: this.state.score + 1 })\n        }\n      }\n  }\n\n  render() {\n    return (\n      <div>\n          <Header game=\"NFL\" />\n          <Board \n          teams={this.state.teams}\n          handleClick={this.handleClick}\n          />\n          <Footer score={this.state.score}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}